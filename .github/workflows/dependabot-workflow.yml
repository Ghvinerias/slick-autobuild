name: Go Test and Validate Dependabot PRs

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.go'
      - '**/go.mod'
      - '**/go.sum'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for git diff between base and head

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Determine affected projects
        id: affected-projects
        run: |
          set -euo pipefail
          BASE_SHA='${{ github.event.pull_request.base.sha }}'
          HEAD_SHA='${{ github.event.pull_request.head.sha }}'
          echo "Base: $BASE_SHA Head: $HEAD_SHA"
          git diff --name-only "$BASE_SHA" "$HEAD_SHA" > changed_files.txt
          echo "Changed files:"; cat changed_files.txt || true

          declare -A PROJECT_SET=()

          while IFS= read -r file; do
            # Skip empty lines
            [ -z "$file" ] && continue
            # Root module (only if go.mod exists at root â€“ currently it does not, so skip automatically)
            if [ "$file" = "go.mod" ] || [ "$file" = "go.sum" ] || [[ "$file" == *.go ]]; then
              if [ -f go.mod ]; then
                PROJECT_SET[.]="1"
              fi
            fi
            # Handle nested modules
            if [[ "$file" == */* ]]; then
              top_dir="${file%%/*}"
              if [ -f "$top_dir/go.mod" ]; then
                PROJECT_SET[$top_dir]="1"
              fi
            fi
          done < changed_files.txt

          PROJECTS=("${!PROJECT_SET[@]}")
          # Ensure stable ordering
          IFS=$'\n' PROJECTS=($(sort <<<"${PROJECTS[*]}") ); unset IFS

          if [ ${#PROJECTS[@]} -eq 0 ]; then
            echo "No Go module changes detected; nothing to test.";
          fi

          echo "Projects to test: ${PROJECTS[*]}"
          echo "projects=${PROJECTS[*]}" >> "$GITHUB_OUTPUT"
      
      - name: Run tests for affected projects
        run: |
          set -euo pipefail
          PROJECTS=( ${{ steps.affected-projects.outputs.projects }} )
          if [ ${#PROJECTS[@]} -eq 0 ]; then
            echo "No affected projects to test. Skipping."; exit 0; fi
          for project in "${PROJECTS[@]}"; do
            echo "Testing project: $project"
            cd "$GITHUB_WORKSPACE/$project"
            if ! find . -name "*_test.go" -type f | grep -q .; then
              echo "No tests found for $project, skipping."; cd "$GITHUB_WORKSPACE"; continue; fi
            go test -v ./... -coverprofile=coverage.out
            cd "$GITHUB_WORKSPACE"
          done

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: -no-fail -fmt=sarif -out=results.sarif ./...

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: gosec
        if: always()

  build-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Determine affected projects
        id: affected-projects
        run: |
          set -euo pipefail
          BASE_SHA='${{ github.event.pull_request.base.sha }}'
          HEAD_SHA='${{ github.event.pull_request.head.sha }}'
          git diff --name-only "$BASE_SHA" "$HEAD_SHA" > changed_files.txt
          declare -A PROJECT_SET=()
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            if [ "$file" = "go.mod" ] || [ "$file" = "go.sum" ] || [[ "$file" == *.go ]]; then
              if [ -f go.mod ]; then PROJECT_SET[.]="1"; fi
            fi
            if [[ "$file" == */* ]]; then
              top_dir="${file%%/*}"
              if [ -f "$top_dir/go.mod" ]; then PROJECT_SET[$top_dir]="1"; fi
            fi
          done < changed_files.txt
          PROJECTS=("${!PROJECT_SET[@]}")
          IFS=$'\n' PROJECTS=($(sort <<<"${PROJECTS[*]}") ); unset IFS
          echo "Projects to build: ${PROJECTS[*]}"
          echo "projects=${PROJECTS[*]}" >> "$GITHUB_OUTPUT"

      - name: Build affected projects
        run: |
          set -euo pipefail
          PROJECTS=( ${{ steps.affected-projects.outputs.projects }} )
          if [ ${#PROJECTS[@]} -eq 0 ]; then echo "No affected projects to build. Skipping."; exit 0; fi
          for project in "${PROJECTS[@]}"; do
            echo "Building project: $project"
            cd "$GITHUB_WORKSPACE/$project"
            if [ -f "main.go" ]; then
              go build -v .
            else
              echo "No main.go found for $project, skipping build."
            fi
            cd "$GITHUB_WORKSPACE"
          done

  dependabot-auto-approve:
    runs-on: ubuntu-latest
    needs: [test, build-check]
    permissions:
      contents: read
      pull-requests: write
    if: ${{ github.actor == 'dependabot[bot]' && success() }}
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Add label based on dependency type
        run: |
          if [[ ${{ steps.metadata.outputs.update-type }} == 'version-update:semver-patch' ]]; then
            echo "Adding patch update label"
            gh pr edit ${{ github.event.pull_request.number }} --add-label "patch-update"
          elif [[ ${{ steps.metadata.outputs.update-type }} == 'version-update:semver-minor' ]]; then
            echo "Adding minor update label"
            gh pr edit ${{ github.event.pull_request.number }} --add-label "minor-update"
          elif [[ ${{ steps.metadata.outputs.update-type }} == 'version-update:semver-major' ]]; then
            echo "Adding major update label"
            gh pr edit ${{ github.event.pull_request.number }} --add-label "major-update"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
