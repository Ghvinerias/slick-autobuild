name: Build and Push Docker Images

permissions:
  contents: read

on:
  push:
    branches: [ main, master ]
    # Removed path restrictions - we'll dynamically check for Dockerfiles in the script

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      changed_projects: ${{ steps.set-matrix.outputs.changed_projects }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      
      - id: set-matrix
        run: |
          CHANGED_DIRS=""
          CHANGED_PROJECTS=""
          
          # Full list of project directories
          ALL_DIRS=$(ls -d */ | cut -f1 -d'/' | grep -v "^\.")
          
          # Check each directory for changes and a Dockerfile
          for dir in $ALL_DIRS; do
            # Skip .github directory and any other hidden directories
            if [[ "$dir" == .* ]]; then
              continue
            fi
            
            # Check if directory has changes AND has a Dockerfile
            if git diff --name-only HEAD^ HEAD | grep "^$dir/" && [ -f "$dir/Dockerfile" ]; then
              CHANGED_DIRS="$CHANGED_DIRS\"$dir\", "
              CHANGED_PROJECTS="$CHANGED_PROJECTS$dir, "
              echo "Found changes and Dockerfile in $dir"
            fi
          done
          
          # Remove trailing comma and space
          CHANGED_DIRS=${CHANGED_DIRS%, }
          CHANGED_PROJECTS=${CHANGED_PROJECTS%, }
          
          # Set matrix output
          echo "matrix={\"project\":[$CHANGED_DIRS]}" >> $GITHUB_OUTPUT
          echo "changed_projects=$CHANGED_PROJECTS" >> $GITHUB_OUTPUT
          echo "Detected changes in: $CHANGED_DIRS"

  build-and-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '{"project":[]}' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Run tests
        working-directory: ./${{ matrix.project }}
        run: go test -v ./...

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: slickg/${{ matrix.project }}
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}},value=v1.0.0
            type=sha,format=short
            type=ref,event=branch
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.project }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=slickg/${{ matrix.project }}:buildcache
          cache-to: type=registry,ref=slickg/${{ matrix.project }}:buildcache,mode=max
  
  notify:
    needs: [detect-changes, build-and-push]
    if: ${{ always() && needs.detect-changes.outputs.changed_projects != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            üê≥ Docker images build status: ${{ needs.build-and-push.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            
            Projects built and pushed to Docker Hub:
            ${{ needs.detect-changes.outputs.changed_projects }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.after }}
            Triggered by: ${{ github.actor }}
